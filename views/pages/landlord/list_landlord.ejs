<!-- by Amity Lu -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>List_landlord</title>
    <style>
         .whole-page-background-image{
            height: 80vh;
            width: 100vw;
            background-image: url('/images/USC_Village.jpg');
            /* background-color: rgba(255,255,255,0.5); */
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            text-align: center;
        }
        .whole-page-background-color{
            height: 80vh;
            width: 100vw;
            /* background-image: url('/images/USC_great_lawn.jpg'); */
            background-color: rgba(255,255,255,0.6);
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }
        .admin-list {
            width: 1200px; /* Adjust the width as needed */
            height: 800px; /* Adjust the height as needed */
            margin: auto; /* Center the element horizontally */
            margin-top: 0px; /* Adjust the margin-top to center vertically */
            border: 2px solid #ffffff; /* Border color (black in this case) */
            border-radius: 10px; /* Border radius to create a circle */
            background-color: rgba(250, 246, 229, 0.8); /* Light beige background color */
            padding: 5px; /* Adjust the padding as needed */
            box-sizing: border-box; /* Include padding and border in the element's total width and height */
            display: flex;
            justify-content: center;
            align-items: top;
        }
         #search-box {
            padding: 5px;
            font-size: 16px;
        }

        #search-button {
            padding: 5px;
            font-size: 16px;
        }
        .styled-table {
            border-collapse: collapse;
            width: 100%;
        }

        .styled-table th,
        .styled-table td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        .styled-table th {
            background-color: #f2f2f2;
        }
        .admin-page-title{           
            /* margin-top: 20px; */
            font-size: 36px; /* Increase the font size */
            color: #333; /* Set a specific text color */
            text-align: center; /* Center the text */
            text-transform: uppercase; /* Convert text to uppercase */
            margin-top: 20px; /* Add some top margin */
            margin-bottom: 20px; /* Add some bottom margin */
            /* Add more styles as needed */

        }
        .error-message{           
            /* margin-top: 20px; */
            font-size: 15px; /* Increase the font size */
            color: rgb(255,0,0); /* Set a specific text color */
            text-align: center; /* Center the text */
            margin-top: 20px; /* Add some top margin */
            margin-bottom: 20px; /* Add some bottom margin */
            /* Add more styles as needed */

        }
        .admin-list {
            width: 1200px; /* Adjust the width as needed */
            height: 800px; /* Fixed height to prevent stretching */
            overflow-y: auto; /* Add a scrollbar if the content overflows vertically */
            margin: auto; /* Center the element horizontally */
            margin-top: 0px; /* Adjust the margin-top to center vertically */
            border: 2px solid #ffffff; /* Border color (black in this case) */
            border-radius: 10px; /* Border radius to create a circle */
            background-color: rgba(250, 246, 229, 0.8); /* Light beige background color */
            padding: 5px; /* Adjust the padding as needed */
            box-sizing: border-box; /* Include padding and border in the element's total width and height */
            display: flex;
            flex-direction: column; /* Stack child elements vertically */
            justify-content: flex-start; /* Align child elements to the start of the container */
            align-items: center; /* Center child elements horizontally */
        }
        .admin-button{
            width: 200px; /* Adjust the width as needed */
            height: 30px; /* Adjust the height as needed */
            background-color: #990000; /* Light beige background color */
            color:#ffffff;
            display: block;
            margin: auto; /* Center the button horizontally */
        }
        .selection {
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 30%;
            font-family: 'Courier New', Courier, monospace;
            /* margin: 10px; */
        }
        .create {
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 5%;
            font-family: 'Courier New', Courier, monospace;
        }
       
    </style>
    <!-- <link rel="stylesheet" href="/styles.css"> Add any additional styles if needed -->
</head>

<body>
    <div class="whole-page-background-color">
        <div class = selection>
            <h4>Location:</h4>
            <select id="Location">
                <option value="">All</option>
                <option value="downtown">Downtown</option>
                <option value="ktown">Ktown</option>
                <option value="DPS">DPS area</option>
            <!-- <option value="false">Unavaliable Housing</option> -->
            </select><br></br>
            
            <h4>nickname:</h4>
            <input id="nickname" type="text" placeholder="Search by nickname">
            <!-- <option value="false">Unavaliable Housing</option> -->
            </select><br></br>
        </div>
        <div class="create">       
            <a id="createPropertyLink" href="">Create New Property</a>
        </div>
        <div class="admin-list">
        <% if (Housinglist && Housinglist.length > 0) { %>
            <table id="user-list" class="styled-table">
                
                <thread>
                    <tr>
                        <th>PropertyId</th>
                        <th>Address</th>
                        <th># of room</th>
                        <th>Rent(USD)</th>
                        <th>nickname</th>
                        <th>Location</th>
                        <th>securityDeposit(USD)</th>
                        <th>Taken</th>
                        <th>Modiy</th>
                        <th>Review Application</th>
                        <th>Delete</th>
                    </tr>
                </thread>
                <tbody>
                <% Housinglist.forEach(user => { %>
                            <tr>
                                <td><%= user._id %></td>
                                <td><%= user.address %></td>
                                <td><%= user.numberOfRooms %></td>
                                <td><%= user.rent %></td>
                                <td><%= user.nickname %></td>
                                <td><%= user.location %></td>
                                <td><%= user.securityDeposit %></td>
                                <td><%= user.taken %></td>
                                <td><a href="/users/<%= user._id %>/modify_property">Edit</a></td>
                                <td><a href="/property/<%= user._id %>/applications">Review</a></td> 
                                <td><button id="deleteButton" class="deleteButton" data-property-id="<%= user._id %>">Delete</button></td>
                            </tr>
                <% }); %>
            </tbody>
            </table>
        <% } else { %>
            <p>No property available.</p>
        <% } %>
     
        </div>
    </div>
    <script>

        document.addEventListener('DOMContentLoaded', function() {
            const url = new URL(window.location.href);
            const landlordId = url.pathname.split('/')[2];
            console.log(landlordId);
            const createPropertyLink = document.getElementById('createPropertyLink');
            createPropertyLink.href = `/users/${landlordId}/createproperty.html`;
        });

        document.getElementById('nickname').addEventListener('keyup', (event) => {
            const searchQuery = event.target.value
            const location = document.getElementById('Location').value;
            return fetch(`/api/property?nickname=${encodeURIComponent(searchQuery)}&location${location}`, {
                method: 'GET'
            })
            .then(response => response.json())
            .then(replaceHousingList)
            .catch(error => { 
                console.error('Error fetching data:', error);
            });
        });

        document.getElementById('Location').addEventListener('change', (event) => {
            const location = document.getElementById('Location').value;

            const selectedValue = event.target.value;
            let apiUrl = '/api/property';
            apiUrl += `?houseType=${selectedValue}`;

            if (location !== '*') {
                apiUrl += `&location=${location}`;
            }

            fetch(apiUrl)
                .then(response => response.json())
                .then(replaceHousingList)
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        });

        document.getElementById('deleteButton').addEventListener('click', async (event) => {
            event.preventDefault();
            const propertyId = document.getElementById('deleteButton').getAttribute('data-property-id');

            try {
                const response = await fetch(`/api/property/${propertyId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                    alert('Deleted');
                    window.location.reload(); 
                // } else {
                //     console.error(`Failed to delete property with ID ${propertyId}`);
                //     // Handle deletion failure
                // }
            } catch (error) {
                console.error('Error:', error);
            }
        });

        function replaceHousingList(housing) {
            const housingList = document.querySelector('.housing-list');
            housingList.innerHTML = ''; // Clear the existing content
            console.log('Received data:', housing); // Log received data
            housing.forEach((unit) => {
                const houseRow = document.createElement('tr');
                houseRow.innerHTML = `
                     <td>${unit._id}</td>
                    <td>${unit.address}</td>
                    <td>${unit.numberOfRooms}</td>
                    <td>${unit.rent}</td>
                    <td>${unit.nickname}</td>
                    <td>${unit.location}</td>
                    <td>${unit.securityDeposit}</td>
                    <td>${unit.taken}</td>
                    <td><a href="/users/${unit._id}/modify_property">Edit</a></td>
                    <td><a href="/property/${unit._id}/applications">Review</a></td>
                `;
                housingList.appendChild(houseRow);
            });
        }
    </script>
</body>

</html>
